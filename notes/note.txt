ðŸ”´ Friday/Saturday - Setup + UI 

	âœ… Project Setup (Github)
		âœ… Migrate Issue to planning.md 
		âœ… Create pseudocode.md document
		âœ… Create static HTML / CSS / JS boilerplate
	
âœ… Build primary game board
		âœ… Build dynamic elements (headings / labels)
		âœ… Build interactive elements (buttons / radios )
		âœ… Provide layout CSS
	
	Stretch / Planning
		Elaborate existing pseudocode to identify changes to the dom 
		Experiment with audio playback (JS Sandbox) 

ðŸ”´ Saturday/Sunday - Initial State + Render

	âœ… Create & Display State 
âœ… Identify DOM elements that will need to be updated
âœ… Create and set starting values for each state
Create render() and verify the DOM shows state in the browser
	Invoke render() in init()
Create helper functions to control changes in state / browser
Functions should describe changes in game play. 
	Render functions might include:
renderScore() 
renderAnswers() 
renderOptions()
Controller functions might include 
updateQuestion()
shuffleCards()
checkWinner()
gameOver() 
Manually update state to play game (start -> end game) 
	Call helper functions() in the order they would be triggered 
	Testing may be manual (invoking them after init() or using browser console
	Verify the game can be played through manually

Stretch / Planning
	Link your UI interactive elements to the handler functions
	Research advanced CSS feature for future development



ðŸ”´ Monday/Tuesday - Interactions + Advanced UI Updates
	
Link Interactive elements to callback functions (if not previously done) 
		Each handler will call one or more helper function that will change state 
		After all helper functions execute call the render() function
		The user should see feedback about the game state after each interaction 
	
Continue working on controller functions to account for game logic 
		Identify which state values determine a â€˜game overâ€™ 
		Examples may include:
				Number of incorrect matches
			No additional trivia questions
			Timer runs out
Verify that game can be played from start to â€˜game overâ€™
			Implement a â€˜game overâ€™ message and play again option
			Remove any non-restart related handlers
			Reset state if play again is selected. 

Stretch: Begin building gameplay â€˜quality of lifeâ€™ features:
	Start buttons
CSS Animations (Flip, Hide/Fade Effects)
Informational cards / discrete about pages to describe rules of the game

ðŸ”´ Tuesday/Wednesday - Refine Gameplay + Stretch goals 
	Deploy application on Github

	Testing local and deployed codebase
Verify MVP code runs without error start to finish
Verify no debugging console.logs appear in deployed game
 	
	Add stretch goals from feature list
 Examples include (choosing one)
Refactors syntax to use classes
Add CSS Animations
Add an audio player
Create a scoreboard, storing top scores using localStorage
API call for expanded content


ðŸ”´ Wednesday/Thursday - Stretch goals + Additional Styling 


Refinement of CSS + Stretch Features 
Explore media queries + responsive layout changes
Customize header / body fonts
Add a color theme, image assets, icons 



ðŸ”´ Thursday/Friday Final Day  -  Documentation 
	
	Provide a feature freeze at 10 PM EST the night before presentations	

	Review Documentation Guidelines and update Readme.md

Test code on GH pages to verify desired MVP functionality is present

What is a â€˜feature freezeâ€™?
A feature freeze is the winding down of active development on a current feature. Once a feature freeze is in place, no active feature development should occur after this point.  The only dev work should be applied to debugging your most recent feature. If the buggy feature is not fixed by 8 pm EST  - Recommendation is to put your non-working code in a â€˜scratch fileâ€™ and remove it from the game to be presented.  

At this point there should be a complete â€˜code freezeâ€™ - no changes should be made to your game. Only modifications to your readme.md are recommended. 
